@page
@model Reflexobot.API.Pages.IndexModel
@{
    ViewData["Title"] = "Reflexobot Dashboard";
}
<!-- import CSS -->
<link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css">

<!-- import JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.2/axios.min.js"></script>
<script src="https://unpkg.com/element-ui/lib/index.js"></script>



<div class="text-center">
    <div id="app">
        <div class="common">
            <div id="top" class="top">
                <div>
                    <el-card class="box-card avatar">
                      <div>
                          <img src="https://raw.githubusercontent.com/Zoomskij/ImagesForBot/main/flexy.jpg" height="150px" weight="150px" />
                          <h2>&nbsp;&nbsp;{{botInfo.firstName}}</h2>
                      </div>
                    </el-card>
                </div>

                <div v-for="course in courses" style="padding-left:10px; display: flex;">
                    <el-card class="box-card" >
                        <div slot="header" class="clearfix">
                        <span><b>{{course.name}}</b></span>

                        </div>
                        <div v-for="lesson in lessons" :key="lessons.guid" class="text item">
                            {{lesson.name}}
                        </div>
                    </el-card>
                </div>

                <div style="padding-left:10px; display: flex;">
                    <el-card class="box-card achievments">
                          <h3>Мои достижения</h3>
                          <el-tooltip v-for="achievment in achievments" class="item-tooltip" effect="light" :content='achievment.description' placement="top-start">
                              <img 
                                :src='achievment.img' 
                                height="60px" 
                                weight="60px" />
                            </el-tooltip>

                    </el-card>
                </div>

                <div style="padding-left:10px" v-if=false>
                    <el-card class="box-card teacher">
                      <div>
                          <img :src="myTeacher.img" height="150px" weight="150px" />
                          <h2>{{myTeacher.name}}</h2>
                      </div>
                    </el-card>
                </div>
            </div>
            <div id="center" class="center">

                <div style="padding-left:10px">
                    <el-card v-for="chat in chats" class="box-card achievments">
                        <div style="display:flex; justify-content: left; align-items:center">
                            <span><b>{{chat.firstName}} {{chat.lastName}}</b></span>
                            <el-tooltip v-for="achievment in achievmentsRand" class="item-tooltip" effect="light" :content='achievment.description' placement="top-start">
                              <img 
                                :src='achievment.img' 
                                height="30px" 
                                weight="30px" />
                            </el-tooltip>
                            
                        </div>

                        <div style="padding-top:5px">
                            <el-progress :text-inside="true" :stroke-width="16" :percentage="percentageRand" status="success"></el-progress>
                        </div>

                    </el-card>
                </div>

                <div>
                    <el-timeline>
                        <el-timeline-item v-for="lesson in lessons" timestamp="2022/06/13" placement="top">
                            <el-card>
                            <h4>{{lesson.name}}</h4>
                            <p>{{lesson.description}}</p>
                            </el-card>
                        </el-timeline-item>
                    </el-timeline>

                    <div style="padding-left:50px">
                        <div class="block">
                            <div style="display:flex; justify-content:space-between">
                                <span><b>Сценарии</b></span>
                                <el-button type="primary" size="small" @@click="newScenarioVisible = true">Создать новый сценарий</el-button>
                            </div>

                            <el-tree
                                :data="scenarios"
                                :prpps="treeProps"
                                empty-text="Сценарии загружаются..."
                                show-checkbox
                                node-key="id"
                                default-expand-all
                                :expand-on-click-node="false"
                                style="padding-top:10px">
                                <span class="custom-tree-node" slot-scope="{ node, scenarios }">
                                <span class="sticky">{{ convertLongLabel(node.label) }}</span>
                                <span class="tree-buttons">
                                    
                                    <el-button
                                        type="text"
                                        size="mini"
                                        @@click="() => append(node)">
                                        Добавить
                                    </el-button>
                                    <el-button
                                        type="text"
                                        size="mini"
                                        @@click="() => edit(node)">
                                        Редактировать
                                    </el-button>
                                    <el-button
                                        type="text"
                                        size="mini"
                                        @@click="() => remove(node, scenarios)">
                                        Удалить
                                    </el-button>
                                </span>
                                </span>
                            </el-tree>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @*Создать новый сценарий (Диалог)*@
        <el-dialog title="Создать новый сценарий" :visible.sync="newScenarioVisible">
          <el-input placeholder="/command" v-model="command"></el-input>

          <span slot="footer" class="dialog-footer">
            <el-button @@click="newScenarioVisible = false">Отменить</el-button>
            <el-button type="primary" @@click="createScenario()">Создать</el-button>
          </span>
        </el-dialog>

        @*Редактировать сценарий (Диалог)*@
        <el-dialog title="Редактирование сценария" :visible.sync="dialogFormVisible">
          <el-input
              type="textarea"
              :autosize="{ minRows: 2, maxRows: 4}"
              placeholder="Сценарий"
              v-model="selectedNodeText">
            </el-input>
          <span slot="footer" class="dialog-footer">
            <el-button @@click="dialogFormVisible = false">Отменить</el-button>
            <el-button type="primary" @@click="save()">Сохранить</el-button>
          </span>
        </el-dialog>
    </div>
</div>


<script>

var app = new Vue({
    el: '#app',
    data: {
        courses: [],
        lessons: [],
        achievments: [],
        chats: [],
        botInfo: {},
        myTeacher: {},
        telegramUserId: '',
        scenarios: [],
        treeProps: {
          id: 'guid',
          //children: 'children',
          //label: 'item.text'
        },
        dialogFormVisible: false,
        newScenarioVisible: false,
        selectedNode:{},
        selectedNodeText: '',
        command: ''
    },
    mounted() {
        //TODO: rewrite + authorize
        this.telegramUserId = window.location.search.substring(5);
        this.getBotInfo();
        this.getMyTeacher();
        this.getCourses();
        this.getAchievments();
        this.getChats();
        this.getScenarios();
    },
    computed: {
        // геттер вычисляемого значения
        achievmentsRand: function () {
          // `this` указывает на экземпляр vm
          return this.achievments.slice(0,Math.floor(Math.random() * 9))
        },
        percentageRand: function () {
            return Math.floor(Math.random() * 100);
        },
    },
    methods: {
        convertLongLabel(text) {
            if (text.length < 150) {
                return text;
            }
            return text.substring(0,150) + "...";
        },
        createScenario(){
            this.newScenarioVisible = true;
        },
        //TREE METHODS 
        append(node) {
            var self = this;

            let parrentId = node.data.guid;
            const newChild = { guid: 15, label: 'testtest', children: [],  };
            if (!node.children) {
                this.$set(node, 'children', []);
            }
            node.children.push(newChild);

            var scenarioAddDto = {
                parrentGuid: parrentId,
                text: 'Текст для редактирования'
            }
            axios.post('/scenario', scenarioAddDto).then(function (response) {
                console.log(response);
                self.getScenarios();
            }).catch(function (error) {
                console.log(error);
            });
        },

        edit(node) {
            this.selectedNode = node;
            this.selectedNodeText = node.data.label;
            this.dialogFormVisible = true;
        },

        createScenario() {
            var self = this;
            var scenarioAddDto = {
                text: '',
                command: this.command,
            }
            axios.post('/scenario', scenarioAddDto).then(function (response) {
                console.log(response);
                self.newScenarioVisible = false;
                self.getScenarios();
            }).catch(function (error) {
                console.log(error);
            });
        },

        save() {
            var self = this;
            var scenarioAddDto = {
                guid: this.selectedNode.data.guid,
                text: this.selectedNodeText
            }

            axios.put('/scenario', scenarioAddDto).then(function (response) {
                console.log(response);
                self.getScenarios();
                self.dialogFormVisible = false;
            }).catch(function (error) {
                console.log(error);
            });
        },

        remove(node, data) {
            var self = this;
            let guid = node.data.guid;
            axios.delete('/scenario/' + guid).then(function (response) {
                console.log(response);
                self.getScenarios();
            }).catch(function (error) {
                console.log(error);
            });
        },

        //Get courses
        getCourses: function () {
            var self = this;
            axios.get('/courses')
            .then(function (response) {
                self.courses = response.data;
                if (self.courses !== null && self.courses) {
                    self.getLessons('8B7AFF9B-E2D0-494F-85BD-D29F96C6AB65');
                }
            })
            .catch(function (error) {
                console.log(error);
            });
        },
        //Get Lessons by course Guid
        getLessons: function (courseGuid) {
            var self = this;
            axios.get('/lessons/' + courseGuid)
            .then(function (response) {
                self.lessons = response.data;
            })
            .catch(function (error) {
                console.log(error);
            });
        },
        //Get Achievments
        getAchievments: function () {
            var self = this;
            axios.get('/achievment')
            .then(function (response) {
                self.achievments = response.data;
            })
            .catch(function (error) {
                console.log(error);
            });
        },
        //Get bot info
        getBotInfo: function () {
            var self = this;
            axios.get('/telegram/status')
            .then(function (response) {
                self.botInfo = response.data;
            })
            .catch(function (error) {
                console.log(error);
            });
        },
        //Get my current teacher
        getMyTeacher: function (telegramUserId) {
            var self = this;
            if (this.telegramUserId !== null && this.telegramUserId !== '') {
                axios.get('/teachers/' + self.telegramUserId)
                .then(function (response) {
                    self.myTeacher = response.data;
                })
                .catch(function (error) {
                    console.log(error);
                });
            }
        },
        getChats: function() {
            var self = this;
            axios.get('/courses/chats')
            .then(function (response) {
                self.chats = response.data;
            })
            .catch(function (error) {
                console.log(error);
            });
        },
        getScenarios: function() {
            var self = this;
            axios.get('/scenario')
            .then(function (response) {
                self.scenarios = response.data;
            })
            .catch(function (error) {
                console.log(error);
            });
        },
    },
})
</script>



<style>
  .common {
  
  }
  .top {
    display:flex;
    justify-content: start; 
  }

  .center {
    display:flex;
    justify-content: start; 
    padding-top:10px;
  }

  .text {
    font-size: 14px;
  }

  .item {
    margin-bottom: 18px;
  }

  .item-tooltip {
      margin: 4px;
    }

  .clearfix:before,
  .clearfix:after {
    display: table;
    content: "";
  }
  .clearfix:after {
    clear: both
  }

.custom-tree-node {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 14px;
    padding-right: 8px;
    width:500px;
  }

span.tree-buttons {
    display: block;
}

span:not(.sticky) { /* can use another selector, just wanted it to be exceptionally clear what i was referring to here */

}
span.sticky {

}
@@media screen and (max-width: 900px) {
  .common {
      display: block;
  }
}

</style>